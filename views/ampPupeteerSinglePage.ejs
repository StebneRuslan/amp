<!doctype html>
<html lang="en">
<% include ampViewerHead.ejs %>
<% let currentSlide = ampStory.cuts.find(cut => {
    return cut.position === +current
})
%>

<body>
<script>
    document.addEventListener('dragover', function (event) {
        event.preventDefault();
        return false;
    }, false);

    document.addEventListener('drop', function (event) {
        event.preventDefault();
        return false;
    }, false);
    window.addEventListener('message', function (event) {
        const currentLayer = document.getElementById(`layer${event.data.currentId}`);
        if (currentLayer) {
            Array.prototype.forEach.call(document.querySelectorAll('.draggable'), (element) => {
                element.classList.remove('draggable');
            });
            Array.prototype.forEach.call(document.querySelectorAll('.dg-wrapper'), (element) => {
                element.remove();
            });
            currentLayer.classList.add('draggable');
            if (!currentLayer.querySelector('.text-container')) {
                const Draggables =
                    Subjx('.draggable').drag({
                        each: {
                            resize: true
                        },
                        snap: {
                            x: 1,
                            y: 1
                        }
                    });
            }
        }
        if (currentLayer) {
            if ([].includes.call(currentLayer.parentNode.classList, 'fullscreen')) {
                Array.prototype.forEach.call(document.querySelectorAll('.dg-hdl'), (element) => {
                    element.style.display = 'none';
                });
                document.querySelector('.dg-controls').style.border = '1px dashed transparent';
            }
        }
        if (event.data.previousId !== null && event.data.previousId !== undefined) {
            const previousLayer = document.getElementById(`layer${event.data.previousId}`);
            previousLayer.classList.remove('resizable');
            if (previousLayer) {

                previousLayer.classList.remove('draggable');

            }
            if (previousLayer) {
                previousLayer.parentNode.classList.remove('layer-border');
            }
        }
    });
    window.addEventListener('keydown', (e) => {
        if (e.keyCode === 90 && (e.ctrlKey || e.metaKey) && e.shiftKey) {
            window.parent.postMessage({event: 'redoStep'}, '*');
        } else if (e.keyCode === 90 && (e.ctrlKey || e.metaKey)) {
            window.parent.postMessage({event: 'undoStep'}, '*');
        }
    });
    window.onload = () => {
        var css = 'amp-story-bookend {display: none!important;} .i-amphtml-story-bookend-active amp-story-page[active] {transition: none!important; filter: none!important;} .i-amphtml-story-bookend-active amp-story-page[active]:after {content: none!important}',
            head = document.head || document.getElementsByTagName('head')[0],
            style = document.createElement('style');
        style.type = 'text/css';
        if (style.styleSheet) {
            style.styleSheet.cssText = css;
        } else {
            style.appendChild(document.createTextNode(css));
        };
        head.appendChild(style);
    };
    const element = null;

    function preventImageDragging (event) {
        event.preventDefault();
    }

    function selectLayer (event) {
        let position = 0;
        if (event.target.id === 'cta-link') {
            Array.prototype.forEach.call(document.querySelectorAll('.dg-wrapper'), (element) => {
                element.remove();
            });
            position = event.target.parentNode.id;
        } else {
            position = getDraggableNode(event.path).children[0].id.toString().slice(5);
        }
        window.parent.postMessage({event: 'selectLayer', position: position}, 'http://127.0.0.1:3978/#/edit');
    }

    function getDraggableNode (path) {
        for (let i = 0; i < path.length; i++) {
            if (path[i].classList && path[i].classList.value) {
                if ([].includes.call(path[i].classList, 'drag-item')) {
                    return path[i];
                }
            }
        }
    }

    function mouseDown(event) {
        event.preventDefault();
        selectLayer(event);
        const ampStoryWidth = document.querySelector('body').clientWidth;
        const ampStoryHeight = document.querySelector('body').clientHeight;
        const target = getDraggableNode(event.path);
        const divParams = target.getBoundingClientRect();
        let centerX = event.x - divParams.left;
        let centerY = event.y - divParams.top;

        if (!target.classList.contains('fullscreen')) {
            document.onmousemove = (moveEvent) => {
                drag(event,
                    getDraggableNode(event.path),
                    moveEvent, centerX, centerY,
                    iframeParams = { ampStoryWidth: ampStoryWidth, ampStoryHeight: ampStoryHeight }
                );
            };
            document.onmouseleave = (moveEvent) => {
                mouseUp(event);
            };
            document.onmousedovn = (moveEvent) => {
                mouseUp(event);
            };
        }

    };

    function mouseUp(event) {
        event.preventDefault();
        document.onmousemove = null;
        document.onmouseleave = null;
    };

    function drag(event, target, moveEvent, centerX, centerY) {
        if (event.screenX !== 0) {
            let leftInPx = (moveEvent.x - centerX);
            let topInPx = (moveEvent.y - centerY);
            target.style.left = ((leftInPx / iframeParams.ampStoryWidth) * 100) + '%';
            target.style.top = ((topInPx / iframeParams.ampStoryHeight) * 100) + '%';
            drop({ offsetX: parseInt(leftInPx, 10), offsetY: parseInt(topInPx, 10) });
        }
    };

    function drop(coordinates) {
        window.parent.postMessage({ event: 'move', coordinates: coordinates }, 'http://127.0.0.1:3978/#/edit');
    }
</script>

<% function getRotateValue (layer) {
    if (layer.settings.layerSettings.fullscreen) {
        var dist = Math.sqrt((Math.pow(ampStory.initialWidth, 2)) + (Math.pow(ampStory.initialHeight, 2)));
        var diagAngle = Math.asin((ampStory.initialHeight) / dist);

        var a1 = (((layer.settings.generalSettings.rotate * Math.PI / 180) % (Math.PI * 2)) + Math.PI * 4) % (Math.PI * 2);
        if (a1 > Math.PI) {
            a1 -= Math.PI;
        }
        if (a1 > Math.PI / 2 && a1 <= Math.PI) {
            a1 = (Math.PI / 2) - (a1 - (Math.PI / 2));
        }

        var ang1 = Math.PI / 2 - diagAngle - Math.abs(a1)
        var ang2 = Math.abs(diagAngle - Math.abs(a1))

        var scale1 = Math.cos(ang1) * dist / layer.settings.layerSettings.originalHeight
        var scale2 = Math.cos(ang2) * dist / layer.settings.layerSettings.originalWidth
        var scale = Math.max(scale1, scale2)
        return scale
    } else {
        return scale
    }
}

function getFullScreenAnimationContainerWidth (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10)
}

function getFullScreenAnimationContainerHeight (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10)
}

function getAnimationWidthEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180)))), 10) / (3.434 * ampStory.initialWidth / 100) + 'em';
}
function getAnimationHeightEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180)))), 10) / (3.434 * ampStory.initialWidth / 100) + 'em';
}

function getAnimationContainerWidth (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10) + '%';
}

function getAnimationContainerHeight (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10) + '%';
}

function getDraggableElementWidth (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalWidth * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        return (100 * layer.settings.layerSettings.width) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}
function getDraggableElementHeight (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalHeight * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        return (100 * layer.settings.layerSettings.height) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}

function getDeraggableElementOffsetX (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetX / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}
function getDeraggableElementOffsetY (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetY / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}

function getFullScreenElementOffsetY (layer) {
    const heightContainerPx = ampStory.initialHeight * getFullScreenAnimationContainerHeight(layer) / 100;
    const heightContentPx = heightContainerPx * getDraggableElementHeight(layer) / 100;
    return (100 * ((heightContainerPx - heightContentPx) / 2) / heightContainerPx)
}

function getFullScreenElementOffsetX (layer) {
    const widthContainerPx = ampStory.initialWidth * getFullScreenAnimationContainerWidth(layer) / 100;
    const widthContentPx = widthContainerPx * getDraggableElementWidth(layer) / 100;
    return (100 * ((widthContainerPx - widthContentPx) / 2) / widthContainerPx)
}

function setLinkBgColor (data) {
    if (data.type === 'solid') {
        return data.leftColor;
    } else if (data.type === 'linear') {
        return `linear-gradient(${data.angle}deg, ${data.leftColor} ${data.leftColorPercent}%, ${data.rightColor} ${data.rightColorPercent}%)`;
    } else if (data.type === 'radial') {
        return `radial-gradient(circle at ${data.horizontalDirection}% ${data.verticalDirection}%, ${data.leftColor} ${data.leftColorPercent}%, ${data.rightColor} ${data.rightColorPercent}%)`;
    }
}
%>

<amp-story class="single-slide" standalone poster-portrait-src="" publisher-logo-src="">
    <amp-story-page style="text-rendering: auto;background: #eeeeee" id='story' auto-advance-after="10s" class="container">
        <% let preview = false;
        if (currentSlide) {
            currentSlide.layers.sort((first, second) => {
                var keyA = first.position,
                        keyB = second.position;
                if(keyA < keyB) return -1;
                if(keyA > keyB) return 1;
                return 0;
            })
        } %>
        <% if (currentSlide) { %>
            <% currentSlide && currentSlide.layers && currentSlide.layers.map((layer, layerIndex) => { %>
                <% var page = null
                        switch (layer.type) {
                case 'text': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="drag-item single-page-item animate">
                        <div id="layer<%=layer.position%>"
                             style=" transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;">
                            <% include layers/text.ejs %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break;

                case 'html': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="drag-item single-page-item animate"
                            style="
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%'%>;
                                    top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%'%>;">
                        <div id="layer<%=layer.position%>"
                             style=" transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;">
                            <% include layers/text.ejs %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break;

                case 'shape': %>
                <amp-story-grid-layer template="horizontal">
                    <div class="drag-item single-page-item animate"
                         style="
                                 position: absolute;
                                 width: <%=getAnimationWidthEm(layer)%>;
                                 height: <%=getAnimationHeightEm(layer)%>;
                         <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                             bottom: 0;
                                     top: initial;
                         <% } else {%>
                             top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                         <% }%>
                                 left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;">
                        <div id="layer<%=layer.position%>" draggable="true" class="rotate-wrapper " style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer);%>;
                                height: <%=getDraggableElementHeight(layer);%>;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                top: <%=getDeraggableElementOffsetY(layer);%>;
                                left: <%=getDeraggableElementOffsetX(layer);%>;">
                            <% include layers/shape.ejs %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break;

                case 'image':
                case 'gifs': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="<%=!layer.settings.layerSettings.fullscreen ? 'drag-item single-page-item animate small-image' : 'fullscreen drag-item single-page-item animate small-image'%>"
                            style="
                                    position: absolute;
                            <%if (layer.settings.layerSettings.fullscreen) {%>
                                    width: <%=getFullScreenAnimationContainerWidth(layer) + '%'%>;
                                    height: <%=getFullScreenAnimationContainerHeight(layer) + '%'%>;
                            <% } else {%>
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <% }%>
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;">
                        <div id="layer<%=layer.position%>"
                                <%if (layer.settings.layerSettings.fullscreen) {%> style="
                                position: absolute;
                                left: <%=getFullScreenElementOffsetX(layer) + '%'%>;
                                top: <%=getFullScreenElementOffsetY(layer) + '%';%>;
                                width: <%=getDraggableElementWidth(layer) + '%'%>;
                                height: <%=getDraggableElementHeight(layer) + '%';%>;
                                transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                " <% } else { %> class="rotate-wrapper" style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer);%>;
                                height: <%=getDraggableElementHeight(layer);%>;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                top: <%=getDeraggableElementOffsetY(layer);%>;
                                left: <%=getDeraggableElementOffsetX(layer);%>;" <% } %>>
                            <%- include('layers/image.ejs', {withAnimations: false, layer: layer }); %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break

                case 'video': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="<%=!layer.settings.layerSettings.fullscreen ? 'drag-item animate small-image' : 'fullscreen drag-item animate small-image'%>"
                            style="
                                    position: absolute;
                            <%if (layer.settings.layerSettings.fullscreen) {%>
                                    width: <%=getFullScreenAnimationContainerWidth(layer) + '%'%>;
                                    height: <%=getFullScreenAnimationContainerHeight(layer) + '%'%>;
                            <% } else {%>
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <% }%>
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                    >
                        <div  id="layer<%=layer.position%>"
                                <%if (layer.settings.layerSettings.fullscreen) {%> style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer)%>;
                                height: <%=getDraggableElementHeight(layer)%>;
                                transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                " <% } else { %> class="rotate-wrapper" style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer);%>;
                                height: <%=getDraggableElementHeight(layer);%>;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                top: <%=getDeraggableElementOffsetY(layer);%>;
                                left: <%=getDeraggableElementOffsetX(layer);%>;" <% } %>>
                            <%- include('layers/image.ejs', {withAnimations: false, layer: layer }); %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break
                case 'cta-link': %>
                <div style="
                    width: 100%;
                    position: absolute;
                    height: 10vh;
                    top: 90%;
                    display: grid;
                 "
                     id="<%=layer.position%>">
                    <a style="
                            margin: auto;
                            padding: 10px 20px;
                            text-align: center;
                            font-size: 16px;
                            font-family: 'Verdana';
                            text-decoration: none;
                            background: <%=setLinkBgColor(layer.settings.layerSettings.shapeStyles.fillColor)%>;
                            color: <%=layer.settings.ctaLayerSettings.fontColor%>;
                            border: <%=layer.settings.layerSettings.shapeStyles.thickness + 'px solid ' + layer.settings.layerSettings.shapeStyles.borderColor.leftColor%>;
                            text-align: center;
                            cursor: default;
                            z-index: <%=currentSlide.layers.length + 1%>;
                            border-radius: <%=(layer.settings.layerSettings.shapeStyles.round.toString() || '25') + 'px'%>"
                       href="<%=layer.settings.ctaLayerSettings.link%>" id="<%=`cta-link`%>"><%=layer.settings.ctaLayerSettings.linkTitle%></a>
                </div>
                <% break } %>
            <% }) %>
        <% } %>
    </amp-story-page>
</amp-story>
</body>

</html>
