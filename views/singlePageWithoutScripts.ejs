<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">
    <script async custom-element="amp-video" src=<%=ampVideoPath%>></script>
    <script async src=<%=v0Path%>></script>
    <script async custom-element="amp-story" src=<%=ampStoryPath%>></script>
    <% if (ampAnimationPath !== null) { %>
    <script async custom-element="amp-animation" src=<%=ampAnimationPath%>></script>
    <% } %>
    <title><%= ampStory.title%></title>
    <link rel="canonical" href="https://test-cutnut-tv.cdn.ampproject.org/c/s/test.cutnut.tv/amp/<%=ampStory.key%>" />
    <style amp-boilerplate>
        body {
            -webkit-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -moz-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            -ms-animation: -amp-start 8s steps(1, end) 0s 1 normal both;
            animation: -amp-start 8s steps(1, end) 0s 1 normal both
        }

        @-webkit-keyframes -amp-start {
            from {
                visibility: hidden
            }

            to {
                visibility: visible
            }
        }

        @-moz-keyframes -amp-start {
            from {
                visibility: hidden
            }

            to {
                visibility: visible
            }
        }

        @-ms-keyframes -amp-start {
            from {
                visibility: hidden
            }

            to {
                visibility: visible
            }
        }

        @-o-keyframes -amp-start {
            from {
                visibility: hidden
            }

            to {
                visibility: visible
            }
        }

        @keyframes -amp-start {
            from {
                visibility: hidden
            }

            to {
                visibility: visible
            }
        }
    </style><noscript>
        <style amp-boilerplate>
            body {
                -webkit-animation: none;
                -moz-animation: none;
                -ms-animation: none;
                animation: none
            }
        </style>
    </noscript>
    <style amp-custom>
        <% include ./fonts/custom.ejs %>

        amp-story.single-slide > div {
            display: none;
        }
        .disable-overlay {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: 100;
        }
        amp-story-grid-layer:not(#full-screen) {
            padding: 0;
        }
        .container:not(#full-screen) {
            background-color: #eeeeee;
        }

        .grid {
            height: 100%;
            width: 100%;
            top: 0;
            right: 0;
            left: 0;
            bottom: 0;
            position: absolute;
        }
        #story img, #story video {
            object-fit: fill;
        }

        #story .full-screan-image img {
            object-fit: cover;
        }


        .item {
            height: 100%;
            align-self: center;
            z-index: 1;
            position: relative;
        }
        .item.text {
            position: relative;
            align-self: center;
            justify-self: stretch;
            /*height: 150px;*/
        }
        .item.text .inner-item {
            align-self: center;
            position: absolute;
        }
        .text-container p {
            white-space: nowrap;
        }
        .text-content {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }
        .single-text {
            width: 100%;
        }
        .flex-container {
            display: flex;
            position: relative;
        }

        .flex-container-full {
            display: flex;
            position: initial;
        }

        .image {
            align-self: center;
            justify-self: center;
        }

        .image-full {
            overflow: hidden;
            align-self: center;
            justify-self: center;
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .amp-img-full {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        img {
            width: 100%;
            height: 100%;
            pointer-events: none;
            -moz-user-select: none;
            -webkit-user-select: none;
            user-select: none;
        }
        amp-img {
            pointer-events: none;
            -moz-user-select: none;
            -webkit-user-select: none;
            user-select: none;
        }


        .drag-item {
            position: absolute;
            top: 50%;
            left: 35%;
        }

        video {
            object-fit: fill;
        }

        .small-image img {
            width: 100%;
            height: 100%;
            object-fit: fill;
        }

        #full-screen {
            position: absolute;
            width: 100%;
            height: 100%;
        }
        #full-screen video {
            object-fit: cover;
        }

        .full-screan-image {
            width: 100%;
            height: 100%;
        }
        .full-screan-image img {
            object-fit: cover;
        }

        .single-text div {
            font-family: Montserrat;
            font-weight: 500;
            white-space: nowrap;
            text-rendering: auto;
        }

        .single-text span {
            text-decoration: inherit;
            white-space: pre;
            line-height: 1.4em;
            white-space: pre-wrap;
            word-break: break-word;
            background-color: inherit;
        }

        .layer-border {
            box-shadow: 0 0 2px 2px white;
            outline: 1px solid black;
        }

        @media screen and (max-width: 1023px) {
            .single-text {
                font-size: 2.6vw;
            }
            .animate {
                font-size: 3.434vw;
            }
            .rotate-wrapper {
                font-size: 3.434vw;
            }
        }
        @media (max-width: 1023px) {
            @media screen and (min-aspect-ratio: 9/12) {
                .single-text {
                    font-size: 1.55vh ;
                }
                .animate {
                    font-size: 1.94vh;
                }
                amp-story-grid-layer {
                    height: 100vh;
                    margin: auto;
                    width: 56.25vh;
                }
                .rotate-wrapper {
                    font-size: 2vh;
                }
            }

            @media screen and (max-aspect-ratio: 9/20) {
                .single-text {
                    font-size: 2.4vw;
                }
                div.animate {
                    font-size: 3.48vw;
                }
                amp-story-grid-layer {
                    height: 177.69vw;
                    margin: auto;
                    width: 100vw;
                }
            }
        }
        @media screen and (min-width: 1024px) {
            .single-text {
                font-size: 1.53vh;
            }
            div.animate {
                font-size: 2.07vh;
            }
        }
    </style>
    <% if (ampStory.fromPreview || !v0Path.includes('https')) { %>
        <link rel="stylesheet" href="/resize-files?path=amp-to-html/dist/style/subjx.css" />
    <% } %>
</head>

<%
if (ampStory.cuts.length === 2) {
    let cut = ampStory.cuts[ampStory.cuts.length - 1]
    ampStory.cuts = []
    ampStory.cuts[0] = cut
}
let currentSlide = ampStory.cuts.find(cut => {
    return cut.position === +current
})
%>

<body>
<% function getRotateValue (layer) {
    if (layer.settings.layerSettings.fullscreen) {
        var dist = Math.sqrt((Math.pow(ampStory.initialWidth, 2)) + (Math.pow(ampStory.initialHeight, 2)));
        var diagAngle = Math.asin((ampStory.initialHeight) / dist);

        var a1 = (((layer.settings.generalSettings.rotate * Math.PI / 180) % (Math.PI * 2)) + Math.PI * 4) % (Math.PI * 2);
        if (a1 > Math.PI) {
            a1 -= Math.PI;
        }
        if (a1 > Math.PI / 2 && a1 <= Math.PI) {
            a1 = (Math.PI / 2) - (a1 - (Math.PI / 2));
        }

        var ang1 = Math.PI / 2 - diagAngle - Math.abs(a1)
        var ang2 = Math.abs(diagAngle - Math.abs(a1))

        var scale1 = Math.cos(ang1) * dist / layer.settings.layerSettings.originalHeight
        var scale2 = Math.cos(ang2) * dist / layer.settings.layerSettings.originalWidth
        var scale = Math.max(scale1, scale2)
        return scale
    } else {
        return scale
    }
}

function getFullScreenAnimationContainerWidth (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10)
}

function getFullScreenAnimationContainerHeight (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10)
}

function getAnimationWidthEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 1.5;
    }
    return parseInt((Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180)))), 10) / (3.434 * ampStory.initialWidth / 100) + 'em';
}
function getAnimationHeightEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 1.5;
    }
    return parseInt((Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180)))), 10) / (3.434 * ampStory.initialWidth / 100) + 'em';
}

function getAnimationContainerWidth (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10) + '%';
}

function getAnimationContainerHeight (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10) + '%';
}

function getDraggableElementWidth (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalWidth * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        return (100 * layer.settings.layerSettings.width) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}
function getDraggableElementHeight (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalHeight * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        return (100 * layer.settings.layerSettings.height) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}

function getDeraggableElementOffsetX (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetX / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}
function getDeraggableElementOffsetY (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetY / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}

function getFullScreenElementOffsetY (layer) {
    const heightContainerPx = ampStory.initialHeight * getFullScreenAnimationContainerHeight(layer) / 100;
    const heightContentPx = heightContainerPx * getDraggableElementHeight(layer) / 100;
    return (100 * ((heightContainerPx - heightContentPx) / 2) / heightContainerPx)
}

function getFullScreenElementOffsetX (layer) {
    const widthContainerPx = ampStory.initialWidth * getFullScreenAnimationContainerWidth(layer) / 100;
    const widthContentPx = widthContainerPx * getDraggableElementWidth(layer) / 100;
    return (100 * ((widthContainerPx - widthContentPx) / 2) / widthContainerPx)
}
%>

<amp-story class="single-slide" standalone poster-portrait-src="" publisher-logo-src="">
    <amp-story-page style="text-rendering: auto;background: #eeeeee" id='story' auto-advance-after="10s" class="container">
        <% let preview = false;
        if (currentSlide) {
            currentSlide.layers.sort((first, second) => {
                var keyA = first.position,
                        keyB = second.position;
                if(keyA < keyB) return -1;
                if(keyA > keyB) return 1;
                return 0;
            })
        } %>
        <% console.log(1, currentSlide) %>
        <% if (currentSlide) { %>
            <% currentSlide && currentSlide.layers && currentSlide.layers.map((layer, layerIndex) => { %>
                <% var page = null
                console.log(2, layer.type)
                        switch (layer.type) {
                    case 'text':
                case 'html': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="drag-item single-page-item animate"
                            style="
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                    <% if (layer.settings.animateIn && !preview){ %> animate-in="<%= layer.settings.animateIn %>"
                            <% } %> <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                    <% if (layer.settings.animateDelay){ %> animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>>
                        <div draggable="true" id="layer<%=layer.position%>" style="
                                outline: none;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                width: <%=getDraggableElementWidth(layer);%>;
                                height: <%=getDraggableElementHeight(layer);%>;
                                top: <%=getDeraggableElementOffsetY(layer);%>;
                                left: <%=getDeraggableElementOffsetX(layer);%>;">
                            <% include layers/text.ejs %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break;

                case 'shape': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="drag-item single-page-item animate"
                            style="
                                    position: absolute;
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                    <% if (layer.settings.animateIn && !preview){ %> animate-in="<%= layer.settings.animateIn %>"
                            <% } %> <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                    <% if (layer.settings.animateDelay){ %> animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>>
                        <div id="layer<%=layer.position%>" draggable="true" class="rotate-wrapper " style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer);%>;
                                height: <%=getDraggableElementHeight(layer);%>;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                top: <%=getDeraggableElementOffsetY(layer);%>;
                                left: <%=getDeraggableElementOffsetX(layer);%>;">
                            <% include layers/shape.ejs %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break;

                    case 'image':
                case 'gifs': %>
                <% if (!['pan-left', 'pan-right', 'pan-up', 'pan-down'].includes(layer.settings.animateIn) || !layer.settings.animateIn) { %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="<%=!layer.settings.layerSettings.fullscreen ? 'drag-item single-page-item animate small-image' : 'fullscreen drag-item single-page-item animate small-image'%>"
                            style="
                                    position: absolute;
                            <%if (layer.settings.layerSettings.fullscreen) {%>
                                    width: <%=getFullScreenAnimationContainerWidth(layer) + '%'%>;
                                    height: <%=getFullScreenAnimationContainerHeight(layer) + '%'%>;
                            <% } else {%>
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <% }%>
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                    <% if (!['pan-left', 'pan-right'].includes(layer.settings.animateIn) && layer.settings.animateIn && !preview){ %>
                            animate-in="<%= layer.settings.animateIn %>" <% } %>
                    <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                    <% if (layer.settings.animateDelay){ %>
                            animate-in-delay="<%= layer.settings.animateDelay %>s" <% } %>
                    <%if (['zoom-in'].includes(layer.settings.animateIn)) { %>
                            scale-start="1" scale-end="1.4"
                            <% } %>
                    <%if (['zoom-out'].includes(layer.settings.animateIn)) { %>
                            scale-start="1.4" scale-end="1"
                            <% } %>
                    >
                        <div draggable="true" id="layer<%=layer.position%>"
                                <%if (layer.settings.layerSettings.fullscreen) {%> style="
                                position: absolute;
                                left: <%=getFullScreenElementOffsetX(layer) + '%'%>;
                                top: <%=getFullScreenElementOffsetY(layer) + '%';%>;
                                width: <%=getDraggableElementWidth(layer) + '%'%>;
                                height: <%=getDraggableElementHeight(layer) + '%';%>;
                                transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                " <% } else { %> class="rotate-wrapper" style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer);%>;
                                height: <%=getDraggableElementHeight(layer);%>;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                top: <%=getDeraggableElementOffsetY(layer);%>;
                                left: <%=getDeraggableElementOffsetX(layer);%>;" <% } %>>
                            <%- include('layers/image.ejs', {withAnimations: true, layer: layer }); %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% } else { %>
                    <amp-story-grid-layer template="fill">
                        <%- include('layers/image.ejs', {withAnimations: true, layer: layer }); %>
                    </amp-story-grid-layer>
                <% } %>
                <% break
                case 'video': %>
                <% if (!['pan-left', 'pan-right', 'pan-up', 'pan-down'].includes(layer.settings.animateIn) || !layer.settings.animateIn) { %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="<%=!layer.settings.layerSettings.fullscreen ? 'drag-item animate small-image' : 'fullscreen drag-item animate small-image'%>"
                            style="
                                    position: absolute;
                            <%if (layer.settings.layerSettings.fullscreen) {%>
                                    width: <%=getFullScreenAnimationContainerWidth(layer) + '%'%>;
                                    height: <%=getFullScreenAnimationContainerHeight(layer) + '%'%>;
                            <% } else {%>
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <% }%>
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                    <% if (layer.settings.animateIn && !preview){ %>
                            animate-in="<%= layer.settings.animateIn %>" <% } %>
                    <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                    <% if (layer.settings.animateDelay){ %>
                            animate-in-delay="<%= layer.settings.animateDelay %>s" <% } %>
                    <%if (['zoom-in'].includes(layer.settings.animateIn)) { %>
                            scale-start="1" scale-end="1.4"
                            <% } %>
                    <%if (['zoom-out'].includes(layer.settings.animateIn)) { %>
                            scale-start="1.4" scale-end="1"
                            <% } %>
                    >
                        <div draggable="true" id="layer<%=layer.position%>"
                                <%if (layer.settings.layerSettings.fullscreen) {%> style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer)%>;
                                height: <%=getDraggableElementHeight(layer)%>;
                                transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                " <% } else { %> class="rotate-wrapper" style="
                                position: absolute;
                                width: <%=getDraggableElementWidth(layer);%>;
                                height: <%=getDraggableElementHeight(layer);%>;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;
                                top: <%=getDeraggableElementOffsetY(layer);%>;
                                left: <%=getDeraggableElementOffsetX(layer);%>;" <% } %>>
                            <%- include('layers/video.ejs', {withAnimations: true, layer: layer }); %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% } else { %>
                    <amp-story-grid-layer template="fill">
                        <%- include('layers/video.ejs', {withAnimations: true, layer: layer }); %>
                    </amp-story-grid-layer>
                <% } %>
                <% break } %>
            <% }) %>
        <% } %>
    </amp-story-page>
</amp-story>
</body>

</html>
