<!doctype html>
<html lang="en">
<% include ampViewerHead.ejs %>
<% let currentSlide = ampStory.cuts.find(cut => {
    return cut.position === +current
})
%>

<body>
<script>
  window.onload = () => {
    var css = 'amp-story-bookend {display: none!important;} .i-amphtml-story-bookend-active amp-story-page[active] {transition: none!important; filter: none!important;} .i-amphtml-story-bookend-active amp-story-page[active]:after {content: none!important}',
      head = document.head || document.getElementsByTagName('head')[0],
      style = document.createElement('style');
    style.type = 'text/css';
    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    };
    head.appendChild(style);
  };
</script>

<% function getRotateValue (layer) {
    if (layer.settings.layerSettings.fullscreen) {
        var dist = Math.sqrt((Math.pow(ampStory.initialWidth, 2)) + (Math.pow(ampStory.initialHeight, 2)));
        var diagAngle = Math.asin((ampStory.initialHeight) / dist);

        var a1 = (((layer.settings.generalSettings.rotate * Math.PI / 180) % (Math.PI * 2)) + Math.PI * 4) % (Math.PI * 2);
        if (a1 > Math.PI) {
            a1 -= Math.PI;
        }
        if (a1 > Math.PI / 2 && a1 <= Math.PI) {
            a1 = (Math.PI / 2) - (a1 - (Math.PI / 2));
        }

        var ang1 = Math.PI / 2 - diagAngle - Math.abs(a1)
        var ang2 = Math.abs(diagAngle - Math.abs(a1))

        var scale1 = Math.cos(ang1) * dist / layer.settings.layerSettings.originalHeight
        var scale2 = Math.cos(ang2) * dist / layer.settings.layerSettings.originalWidth
        var scale = Math.max(scale1, scale2)
        return scale
    } else {
        return scale
    }
}

function getFullScreenAnimationContainerWidth (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10)
}

function getFullScreenAnimationContainerHeight (layer) {
    return parseFloat((100 * (Math.abs((+layer.settings.layerSettings.originalWidth * getRotateValue (layer)) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.originalHeight * getRotateValue (layer)) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10)
}

function getAnimationWidthEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return (+layer.settings.layerSettings.width + thickness) / (3.434 * ampStory.initialWidth / 100) + 'em';
}
function getAnimationHeightEm (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return(+layer.settings.layerSettings.height + thickness) / (3.434 * ampStory.initialWidth / 100) + 'em';
}

function getAnimationContainerWidth (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialWidth, 10) + '%';
}

function getAnimationContainerHeight (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    return parseInt((100 * (Math.abs((+layer.settings.layerSettings.width + thickness) *
            Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
            Math.abs((+layer.settings.layerSettings.height + thickness) *
                    Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) / ampStory.initialHeight, 10) + '%';
}

function getDraggableElementWidth (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalWidth * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        return (100 * layer.settings.layerSettings.width) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}
function getDraggableElementHeight (layer) {
    if (layer.settings.layerSettings.fullscreen && layer.type === 'image') {
        return (100 * layer.settings.layerSettings.originalHeight * getRotateValue(layer)) / parseInt((Math.abs(layer.settings.layerSettings.originalWidth * getRotateValue(layer) *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.originalHeight * getRotateValue(layer) *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180)))));
    } else {
        return (100 * layer.settings.layerSettings.height) / parseInt((Math.abs(layer.settings.layerSettings.width *
                Math.sin(layer.settings.generalSettings.rotate * (Math.PI / 180))) +
                Math.abs(layer.settings.layerSettings.height *
                        Math.cos(layer.settings.generalSettings.rotate * (Math.PI / 180))))) + '%';
    }
}

function getDeraggableElementOffsetX (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetX / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}
function getDeraggableElementOffsetY (layer) {
    let thickness = 0;
    if (layer.settings.layerSettings.shapeStyles) {
        thickness = layer.settings.layerSettings.shapeStyles.thickness * 2;
    }
    if (layer.settings.generalSettings.rotate !== '0') {
        return layer.settings.generalSettings.innerOffsetY / (3.434 * (ampStory.initialWidth / 100)) + 'em';
    } else return '0';
}

function getFullScreenElementOffsetY (layer) {
    const heightContainerPx = ampStory.initialHeight * getFullScreenAnimationContainerHeight(layer) / 100;
    const heightContentPx = heightContainerPx * getDraggableElementHeight(layer) / 100;
    return (100 * ((heightContainerPx - heightContentPx) / 2) / heightContainerPx)
}

function getFullScreenElementOffsetX (layer) {
    const widthContainerPx = ampStory.initialWidth * getFullScreenAnimationContainerWidth(layer) / 100;
    const widthContentPx = widthContainerPx * getDraggableElementWidth(layer) / 100;
    return (100 * ((widthContainerPx - widthContentPx) / 2) / widthContainerPx)
}

function setLinkBgColor (data) {
    if (data.type === 'solid') {
        return data.leftColor;
    } else if (data.type === 'linear') {
        return `linear-gradient(${data.angle}deg, ${data.leftColor} ${data.leftColorPercent}%, ${data.rightColor} ${data.rightColorPercent}%)`;
    } else if (data.type === 'radial') {
        return `radial-gradient(circle at ${data.horizontalDirection}% ${data.verticalDirection}%, ${data.leftColor} ${data.leftColorPercent}%, ${data.rightColor} ${data.rightColorPercent}%)`;
    }
}

function changeCtaLink (link) {
    if (link.match('^https?:\/\/')) {
        return link;
    } else {
        return `https://${link}`;
    }
}
%>

<amp-story class="single-slide" standalone poster-portrait-src="" publisher-logo-src="">
    <amp-story-page style="text-rendering: auto;background: #eeeeee" id='story' auto-advance-after="<%=currentSlide.duration || 10%>s" class="container">
        <% let preview = false;
        if (currentSlide) {
            currentSlide.layers.sort((first, second) => {
                var keyA = first.position,
                        keyB = second.position;
                if(keyA < keyB) return -1;
                if(keyA > keyB) return 1;
                return 0;
            })
        } %>
        <% if (currentSlide) { %>
            <% currentSlide && currentSlide.layers && currentSlide.layers.map((layer, layerIndex) => { %>
                <% var page = null
                        switch (layer.type) {
                    case 'text':
                case 'html': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="drag-item single-page-item animate"
                            style="
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                    <% if (layer.settings.animateIn && !preview){ %> animate-in="<%= layer.settings.animateIn %>"
                            <% } %> <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                    <% if (layer.settings.animateDelay){ %> animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>>
                        <div draggable="true" class="rotate-wrapper" id="layer<%=layer.position%>" style="
                                outline: none;
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;">
                            <% include layers/text.ejs %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break;

                case 'shape': %>
                <amp-story-grid-layer template="horizontal">
                    <div
                            class="drag-item single-page-item animate"
                            style="
                                    position: absolute;
                                    width: <%=getAnimationWidthEm(layer)%>;
                                    height: <%=getAnimationHeightEm(layer)%>;
                            <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                bottom: 0;
                                        top: initial;
                            <% } else {%>
                                top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                            <% }%>
                                    left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                    <% if (layer.settings.animateIn && !preview){ %> animate-in="<%= layer.settings.animateIn %>"
                            <% } %> <% if (layer.settings.animateDuration){ %>
                            animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                    <% if (layer.settings.animateDelay){ %> animate-in-delay="<%= layer.settings.animateDelay %>s"
                            <% } %>>
                        <div id="layer<%=layer.position%>" draggable="true" class="rotate-wrapper " style="
                                transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;">
                            <% include layers/shape.ejs %>
                        </div>
                    </div>
                </amp-story-grid-layer>
                <% break;

                case 'image':
                case 'gifs': %>
                <% if (layer.content.image && layer.content.image) { %>
                    <% if (!['pan-left', 'pan-right', 'pan-up', 'pan-down'].includes(layer.settings.animateIn) || !layer.settings.animateIn) { %>
                    <amp-story-grid-layer template="horizontal">
                        <div
                                class="<%=!layer.settings.layerSettings.fullscreen ? 'drag-item single-page-item animate small-image' : 'fullscreen drag-item single-page-item animate small-image'%>"
                                style="
                                        position: absolute;
                                <%if (layer.settings.layerSettings.fullscreen) {%>
                                        width: <%=getFullScreenAnimationContainerWidth(layer) + '%'%>;
                                        height: <%=getFullScreenAnimationContainerHeight(layer) + '%'%>;
                                <% } else {%>
                                        width: <%=getAnimationWidthEm(layer)%>;
                                        height: <%=getAnimationHeightEm(layer)%>;
                                <% }%>
                                <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                    bottom: 0;
                                            top: initial;
                                <% } else {%>
                                    top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                                <% }%>
                                        left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                        <% if (layer.settings.animateIn && !preview){ %>
                                animate-in="<%= layer.settings.animateIn %>" <% } %>
                        <% if (layer.settings.animateDuration){ %>
                                animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                        <% if (layer.settings.animateDelay){ %>
                                animate-in-delay="<%= layer.settings.animateDelay %>s" <% } %>
                        <%if (['zoom-in'].includes(layer.settings.animateIn)) { %>
                                scale-start="1" scale-end="1.4"
                                <% } %>
                        <%if (['zoom-out'].includes(layer.settings.animateIn)) { %>
                                scale-start="1.4" scale-end="1"
                                <% } %>
                        >
                            <div draggable="true" id="layer<%=layer.position%>"
                                    <%if (layer.settings.layerSettings.fullscreen) {%> style="
                                    position: absolute;
                                    left: <%=getFullScreenElementOffsetX(layer) + '%'%>;
                                    top: <%=getFullScreenElementOffsetY(layer) + '%';%>;
                                    width: <%=getDraggableElementWidth(layer) + '%'%>;
                                    height: <%=getDraggableElementHeight(layer) + '%';%>;
                                    transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                    " <% } else { %> class="rotate-wrapper" style="
                                    transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;" <% } %>>
                                <%- include('layers/image.ejs', {withAnimations: true, layer: layer }); %>
                            </div>
                        </div>
                    </amp-story-grid-layer>
                    <% } else { %>
                    <amp-story-grid-layer template="fill">
                        <%- include('layers/image.ejs', {withAnimations: true, layer: layer }); %>
                    </amp-story-grid-layer>
                    <% } %>
                <% } %>
                <% break
                case 'video': %>
                <% if (layer.content.video && layer.content.video.url) { %>
                    <% if (!['pan-left', 'pan-right', 'pan-up', 'pan-down'].includes(layer.settings.animateIn) || !layer.settings.animateIn) { %>
                    <amp-story-grid-layer template="horizontal">
                        <div
                                class="<%=!layer.settings.layerSettings.fullscreen ? 'drag-item animate small-image' : 'fullscreen drag-item animate small-image'%>"
                                style="
                                        position: absolute;
                                <%if (layer.settings.layerSettings.fullscreen) {%>
                                        width: <%=getFullScreenAnimationContainerWidth(layer) + '%'%>;
                                        height: <%=getFullScreenAnimationContainerHeight(layer) + '%'%>;
                                <% } else {%>
                                        width: <%=getAnimationWidthEm(layer)%>;
                                        height: <%=getAnimationHeightEm(layer)%>;
                                <% }%>
                                <%if (+ampStory.initialHeight - (+layer.settings.generalSettings.offsetY + +layer.settings.layerSettings.height) === 0) {%>
                                    bottom: 0;
                                            top: initial;
                                <% } else {%>
                                    top: <%= ((layer.settings.generalSettings.offsetY / ampStory.initialHeight) * 100) + '%' %>;
                                <% }%>
                                        left: <%= ((layer.settings.generalSettings.offsetX / ampStory.initialWidth) * 100) + '%' %>;"
                        <% if (layer.settings.animateIn && !preview){ %>
                                animate-in="<%= layer.settings.animateIn %>" <% } %>
                        <% if (layer.settings.animateDuration){ %>
                                animate-in-duration="<%= layer.settings.animateDuration %>s" <% } %>
                        <% if (layer.settings.animateDelay){ %>
                                animate-in-delay="<%= layer.settings.animateDelay %>s" <% } %>
                        <%if (['zoom-in'].includes(layer.settings.animateIn)) { %>
                                scale-start="1" scale-end="1.4"
                                <% } %>
                        <%if (['zoom-out'].includes(layer.settings.animateIn)) { %>
                                scale-start="1.4" scale-end="1"
                                <% } %>
                        >
                            <div draggable="true" id="layer<%=layer.position%>"
                                    <%if (layer.settings.layerSettings.fullscreen) {%> style="
                                    position: absolute;
                                    width: <%=getDraggableElementWidth(layer)%>;
                                    height: <%=getDraggableElementHeight(layer)%>;
                                    transform: <%=`rotate(${layer.settings.generalSettings.rotate}deg)`%>;
                                    " <% } else { %> class="rotate-wrapper" style="
                                    transform: <%='rotate(' + layer.settings.generalSettings.rotate + 'deg)'%>;" <% } %>>
                                <%- include('layers/video.ejs', {withAnimations: false, layer: layer, duration: currentSlide.duration }); %>
                            </div>
                        </div>
                    </amp-story-grid-layer>
                    <% } else { %>
                    <amp-story-grid-layer template="fill">
                        <%- include('layers/video.ejs', {withAnimations: false, layer: layer, duration: currentSlide.duration }); %>
                    </amp-story-grid-layer>
                    <% } %>
                <% } %>
                <% break
                case 'cta-link': %>
                <div style="
                    width: 100%;
                    position: absolute;
                    height: 10vh;
                    top: 90%;
                    display: grid;" id="<%=layer.position%>">
                    <a class='cta-link' onmousedown="selectLayer(event)"
                       style="
                               background: <%=setLinkBgColor(layer.settings.layerSettings.shapeStyles.fillColor)%>;
                               color: <%=layer.settings.ctaLayerSettings.fontColor%>;
                               border: <%=layer.settings.layerSettings.shapeStyles.thickness + 'px solid ' + layer.settings.layerSettings.shapeStyles.borderColor.leftColor%>;
                               z-index: <%=currentSlide.layers.length + 1%>;
                               border-radius: <%=(isNaN(layer.settings.layerSettings.shapeStyles.round) ? 25 : layer.settings.layerSettings.shapeStyles.round) + 'px';%>"
                       href="<%=layer.settings.ctaLayerSettings.link%>"
                       id="<%=`cta-link`%>"><%=layer.settings.ctaLayerSettings.linkTitle%></a>
                </div>
                <% break } %>
            <% }) %>
        <% } %>
    </amp-story-page>
</amp-story>

<script type="text/javascript" src="/resize-files?path=amp-to-html/dist/js/subjx.js"></script>
</body>

</html>
